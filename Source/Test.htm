<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
	    <title></title>
	    <script type="text/javascript">

    	    var ClassFactory = {
    	        createClass: function(base, instanceProperties, staticProperties) {

    	            if (typeof base !== "function") {
    	                alert("base must be a function");
    	            }
    	            
    	            var newClass = new Function();
    	            newClass["[[properties]]"] = {};
    	            newClass["[[methods]]"] = {};

    	            extend(newClass["[[properties]]"], base["[[properties]]"], true);
    	            extend(newClass["[[methods]]"], base["[[methods]]"], true);

    	            for (var key in instanceProperties) {
    	                if (instanceProperties.hasOwnProperty) {
    	                    if (instanceProperties[key].constructor === Function) {
    	                        newClass["[[methods]]"][key] = instanceProperties[key];
    	                    } else {
    	                        newClass["[[properties]]"][key] = instanceProperties[key];
    	                    }
    	                }
    	            }

    	            extend(newClass.prototype, newClass["[[methods]]"], true);

    	            extend(newClass, staticProperties, true);

    	            newClass.createNew = function(parameters) {
    	                var newInstance = new this();
    	                extend(newInstance, this["[[properties]]"], true);
    	                extend(newInstance, parameters, true);
    	                return newInstance;
    	            };

    	            return newClass;
    	        }
    	    };

	        function extend(target, source, deep) {
	            var key;
	            var self = arguments.callee;
	            
	            if (!deep) {
	                for (key in source) {
	                    if (source.hasOwnProperty(key)) {
	                        target[key] = source[key];
	                    }
	                }
	                return target;
	            }

	            for (key in source) {
	                if (source.hasOwnProperty(key)) {
	                    var value = source[key];
	                    if (value !== null && typeof value === "object") {
	                        target[key] = new value.constructor();
	                        self(target[key], value, true);
	                    } 
	                    else {
	                        target[key] = value;
	                    }
	                }
	            }

	            return target;
	        }

	        var Person = ClassFactory.createClass(Object, { instanceMethod: function () { alert("instanceMethod"); }, instanceFiled: "instanceFiled" }, { staticMethod: function () { alert("staticMethod"); }, staticField: "staticField" });
	        var p1 = Person.createNew({});
	        alert(p1.instanceFiled);

    	</script>
	</head>
	<body>
	
	</body>
</html>